create database book_store;

use book_store;


-- Create the Books table
CREATE TABLE Books (
  book_id INT PRIMARY KEY,
  title VARCHAR(100),
  author VARCHAR(100),
  genre VARCHAR(50),
  price DECIMAL(8, 2)
);

-- Insert data into the Books table
INSERT INTO Books (book_id, title, author, genre, price)
VALUES
  (1, 'The Great Gatsby', 'F. Scott Fitzgerald', 'Fiction', 10.99),
  (2, 'To Kill a Mockingbird', 'Harper Lee', 'Fiction', 12.50),
  (3, '1984', 'George Orwell', 'Science Fiction', 8.99),
  (4, 'Pride and Prejudice', 'Jane Austen', 'Romance', 9.99),
  (5, 'The Catcher in the Rye', 'J.D. Salinger', 'Fiction', 11.25);

-- Create the Customers table
CREATE TABLE Customers (
  customer_id INT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100),
  city VARCHAR(50),
  country VARCHAR(50)
);

-- Insert data into the Customers table
INSERT INTO Customers (customer_id, name, email, city, country)
VALUES
  (1, 'John Smith', 'john@example.com', 'London', 'UK'),
  (2, 'Jane Doe', 'jane@example.com', 'New York', 'USA'),
  (3, 'Michael Johnson', 'michael@example.com', 'Sydney', 'Australia'),
  (4, 'Sophia Rodriguez', 'sophia@example.com', 'Paris', 'France'),
  (5, 'Luis Hernandez', NULL, 'Mexico City', 'Mexico');

-- Create the Orders table
CREATE TABLE Orders (
  order_id INT PRIMARY KEY,
  customer_id INT,
  order_date DATE,
  total_amount DECIMAL(10, 2),
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Insert data into the Orders table
INSERT INTO Orders (order_id, customer_id, order_date, total_amount)
VALUES
  (1, 1, '2022-01-15', 50.99),
  (2, 2, '2022-02-20', 75.50),
  (3, 3, '2022-03-10', 30.75),
  (4, 4, '2022-04-05', 22.99),
  (5, 5, '2022-05-12', 15.25);

-- Create the Order_Items table
CREATE TABLE Order_Items (
  order_item_id INT PRIMARY KEY,
  order_id INT,
  book_id INT,
  quantity INT,
  FOREIGN KEY (order_id) REFERENCES Orders(order_id),
  FOREIGN KEY (book_id) REFERENCES Books(book_id)
);

-- Insert data into the Order_Items table
INSERT INTO Order_Items (order_item_id, order_id, book_id, quantity)
VALUES
  (1, 1, 1, 2),
  (2, 2, 3, 1),
  (3, 3, 2, 3),
  (4, 4, 5, 1),
  (5, 5, 4, 2);

select * from books;

-- CASE STUDY QUESTIONS--

-- 1. RETRIEVE ALL BOOKS WITH A PRICE GREATEER THAN $10--
select *, concat('$', price) as Price_above_10 from books where price > 10;

-- 2. Find the total amount spent by each customer in descending order--
select name as customer_info, concat('$', total_amount) as Total_amount_spent from customers
join orders on orders.customer_id=customers.customer_id
group by name
order by total_amount desc;

-- 3. Retrieve the top 3 best selling books based on the total quantity sold--
select title, author, genre, sum(quantity) as Total_quantity_sold from books
join order_items on books.book_id=order_items.book_id
group by title
order by Total_quantity_sold desc limit 3;

-- 4. Find the avaerage price of books in the fiction genre--
select genre, concat ('$', avg(price)) as Average_price from books
where genre ='Fiction';

-- 5. Retrieve the names of customers who have placed orders--
select name as Customer_info, order_id, order_date from customers
join orders on orders.customer_id=customers.customer_id
where order_id is not null
group by name;

-- 6. Find the total revenue generated from book sales--
select concat('$', sum(p.price*q.quantity)) as Total_revenue from books p
join order_items q on p.book_id=q.book_id;

-- 7. Retrieve the books with titles containing the word "and"--
select title from books
where title like '%and%';

-- 8. Find the customers who have placed orders worth more than $50--
select name, order_id, concat('$', total_amount) orders_above_50 from customers
join orders on orders.customer_id=customers.customer_id
where total_amount > 50
group by total_amount;

-- 9. Retrieve the book titles and their corresponding authors sorted in alphabetical order by author--
 select title, author from books
 order by author asc;
 
 -- 10. Find the customers who have not placed any orders--
 select c.name as Customer_info, order_id, order_date from customers c
join orders on orders.customer_id=c.customer_id
where order_id is null
group by name;

-- VOILA WE COME TO THE END OF THE CASE STUDY --
